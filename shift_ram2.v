module shift_ram2(
	clock,
	data,
	rdaddress,
	wraddress,
	q,
	wren);

	//---Ports declearation: generated by Robei---
	input clock;
	input [7:0] data;
	input [9:0] rdaddress;
	input [9:0] wraddress;
	output [7:0] q;
	input wren;

	wire clock;
	wire [7:0] data;
	wire [9:0] rdaddress;
	wire [9:0] wraddress;
	reg [7:0] q;
	wire wren;

	//----Code starts here: integrated by Robei-----
	//reg define main
	//reg            [7:0]          ram_reg11       ;
	//reg            [7:0]          ram_reg12       ;
	//reg            [7:0]          ram_reg13       ;
	
	//reg            [9:0]        writeaddress      ;   
	//reg            [9:0]        redaddress        ;
	
	//640*8定义伪RAM
	reg            [7:0]         f_ram    [0:639];
	
	//some wire define
	//wire          [9:0]         address_number;
	
	/*
	//写数据操作always 使能
	always@(posedge clock) begin
	     if(wren)
	              writeaddress <= 10'b0        ; 
	      else 
	              writeaddress <= wraddress;
	
	end
	*/
	
	//assign address_number = wraddress;
	
	//写数据操作always 储存
	always@(posedge clock) begin
	  if(wren) 
	      f_ram[wraddress-1] = data      ;
	  else
	      f_ram[wraddress-1] = f_ram[wraddress-1];
	
	end
	
	//读数据操作
	always@(posedge clock) begin
	  q =  f_ram[rdaddress-1]               ;
	end
	
	
	
	
endmodule    //shift_ram2

